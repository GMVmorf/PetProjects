apply plugin: 'maven'
apply plugin: 'java'
apply plugin: 'application'
apply plugin: 'jacoco'
apply plugin: "eu.leontebbens.gradle.chromedriver-updater"
apply plugin: 'org.sonarqube'
group = 'ru.mgprojects'
description = 'Utils for work with files.'
version = 1.0

sourceCompatibility = 1.8
targetCompatibility = 1.8
tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath "io.qameta.allure:allure-gradle:2.4"
        classpath "gradle.plugin.eu.leontebbens.gradle:chromedriver-updater-plugin:1.6"
        classpath 'org.sonarsource.scanner.gradle:sonarqube-gradle-plugin:2.5'

    }
}

sourceSets {
    run {
        java {
            compileClasspath += main.output + test.output
            runtimeClasspath += main.output + test.output
            srcDirs = files('src/main/java')
        }
        resources {
            srcDirs = files('src/main/resources')
        }
    }
}

configurations {
    runCompile.extendsFrom testCompile
    runRuntime.extendsFrom testRuntime

    compile {
        //transitive = false
        runtime.exclude group: "org.slf4j", module: "slf4j-log4j12"
    }
}

dependencies {
    compile group: 'commons-io', name: 'commons-io', version: '2.+'
//    compile "org.slf4j:slf4j-api:${slf4jVer}"
//    compile "org.slf4j:slf4j-simple:${slf4jVer}"
    compile "io.qameta.allure:allure-junit4:${allureJUnitVersion}"
    compile 'io.qameta.allure:allure-gradle:2.4'
    compile "com.codeborne:selenide:${selenideVer}"
    compile "org.apache.commons:commons-lang3:${lang3Ver}"
    testCompile "ch.qos.logback:logback-classic:${logbackVersion}"
    testCompile group: 'junit', name: 'junit', version: '4.12'
    testCompile "org.mockito:mockito-core:${mockitoVer}"
}

tasks.withType(Test) {
    //  6 forks for parallel tests - one fork for one test class
    maxParallelForks = 6
}

run () {
    dependsOn updateChromedriver

    mainClassName = "FileHelper"
    classpath = sourceSets.main.runtimeClasspath
    outputs.upToDateWhen { false }

    systemProperty "webdriver.path", findProperty("webdriver.path") ?: "${updateChromedriver.driverLocation}"
}

task testJar(type: Jar) {
    from sourceSets.test.output
    version = "${rootProject.version}-${-> rootProject.buildNumber.value}"
    classifier = 'test'
}
artifacts.archives testJar

//region Allure reporting
// plugin creates tasks in afterEvaluate handler, so configuring these tasks must be in same handler too
apply plugin: 'io.qameta.allure'

allure {
    version = project.properties.allureVersion
    aspectjweaver = true
    // set explicitly because have to add runtime dependency of same version
    aspectjVersion = project.properties.aspectjweaverVersion
    // need compile to because Allure annotations are used in 'main' source set
    configuration = 'compile'
    useJUnit4 {
        version = project.properties.allureJUnitVersion
    }
}

afterEvaluate {
    allureReport {
        group = 'Reporting'
        description = 'Aggregated testing report'
    }
    tasks.run.finalizedBy(allureReport)
}
//endregion

sonarqube {
    properties {
        properties["sonar.sources"] += sourceSets.e2eTest.java.srcDirs
        properties["sonar.java.binaries"] += sourceSets.e2eTest.output.classesDir
        properties["sonar.coverage.exclusions"] = '**'
        properties["sonar.issue.ignore.multicriteria"] = 'e1,e2,e3,e4'
        // IP addresses should not be hardcoded
        properties["sonar.issue.ignore.multicriteria.e1.ruleKey"] = 'squid:S1313'
        properties["sonar.issue.ignore.multicriteria.e1.resourceKey"] = '**'
        // Credentials should not be hard-coded
        properties["sonar.issue.ignore.multicriteria.e2.ruleKey"] = 'squid:S2068'
        properties["sonar.issue.ignore.multicriteria.e2.resourceKey"] = '**'
        // Public methods should throw at most one checked exception
        properties["sonar.issue.ignore.multicriteria.e3.ruleKey"] = 'squid:S1160'
        properties["sonar.issue.ignore.multicriteria.e3.resourceKey"] = '**'
        // Methods should not be too complex
        properties["sonar.issue.ignore.multicriteria.e4.ruleKey"] = 'squid:MethodCyclomaticComplexity'
        properties["sonar.issue.ignore.multicriteria.e4.resourceKey"] = '**'
    }
}
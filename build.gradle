group = 'ru.mgprojects'
description = 'Pet projects.'
version = "1.0"

//apply from: "$rootDir/libraries.gradle"
//  try to use task `Test` parameter `maxParallelForks = 6` if any
//org.gradle.parallel = true

//region buildscript
buildscript {
    repositories {
        jcenter()
        maven { url 'https://plugins.gradle.org/m2/' }
        mavenCentral()
    }

    //region Read version information from local file and increment as appropriate
    ext.getLibraries = { ->
        def libraries = new Properties()
        file("libraries.properties").withInputStream { libraries.load(it) }
        libraries.each { k, v -> libraries[k] = v.replace("\"", "") }
        return libraries
    }
    //endregion

    def dependenciesLibraries = project.getLibraries()
    dependencies {
        classpath dependenciesLibraries["gradleBundlePlugin"]
        classpath dependenciesLibraries["buildInfoExtractorGradleVersion"]
        classpath dependenciesLibraries["kotlinAllopen"]
        classpath dependenciesLibraries["kotlinNoarg"]
        classpath dependenciesLibraries["kotlinGradlePlugin"]
    }
}
//endregion

//  All libraries
def libraries = getLibraries()

//region  Compatibility properties
allprojects {
    apply plugin: 'java'
    apply plugin: 'kotlin'

    repositories {
//        mavenLocal()
        jcenter()
        mavenCentral()
    }

    sourceCompatibility = libraries["jvmVersion"]
    targetCompatibility = libraries["jvmVersion"]

    tasks.withType(JavaCompile) {
        options.encoding = 'UTF-8'
    }
}
//endregion

//region Subprojects
subprojects {
    jar.enabled = true

    dependencies {
        compile libraries["kotlinStdlib"]
        compile libraries["kotlinReflect"]

        testCompile libraries["junit5engine"]
        testCompile libraries["junit5api"]
        testCompile libraries["junit5params"]

        testCompile libraries["mockitoKotlin"]
        testCompile libraries["mockk"]
    }

    tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).all {
        kotlinOptions {
            jvmTarget = libraries["jvmVersion"]
            javaParameters = true
        }
    }

    clean.doLast {
        file('logs').deleteDir()
        file('out').deleteDir()
    }

    test {
        useJUnitPlatform()
    }

}

//endregion
